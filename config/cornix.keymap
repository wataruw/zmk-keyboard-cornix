/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/ext_power.h>
#include <behaviors/naginata.dtsi>

// tap windows for ctl alt and gui

#define HM_TAPPING_TERM 250
#define HM_TAPPING_REPEAT 210

// quick tapping for shift

#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 70
#define BASE 0
#define LOWER 1
#define RAISE 2
#define NAGINATA 3

// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH1 LH0 RH0 RH1
#define KEYS_T LH1 LH0 RH0 RH1
#define ZMK_POINTING_DEFAULT_SCRL_VAL 15

/ {
    // Activate ADJUST layer by pressing raise and lower

    macros {
        ng_on: ng_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LANGUAGE_1 &kp INTERNATIONAL_4 &to 3>
                ;
        };
        ng_off: ng_off {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LANGUAGE_2 &kp INTERNATIONAL_5 &to 0>
                ;
        };
    };

    behaviors {
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            //flavor = "balanced";

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // for quick tapping; shift+~

            hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };

        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;

            flavor = "hold-preferred";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_ng_on {
            timeout-ms = <300>;
            key-positions = <18 19>; // H, J
            bindings = <&ng_on>;
            layers = <0>;
        };
        combo_ng_off {
            timeout-ms = <300>;
            key-positions = <16 17>; // F, G
            bindings = <&ng_off>;
            layers = <0 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Base";

            // -----------------------------------------------------  -------------------------------------------------------
            // | TAB   |  Q     |  W  |  E   |  R   |  T   |                   |  Y    |  U    |  I    |  O   |   P   |  ESC |
            // | CTRL  |  A     |  S  |  D   |  F   |  G   |                   |  H    |  J    |  K    |  L   |   -   |  @   |
            // | SHIFT |  Z     |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N    |  M    |  ,    |  .   |   ↑   |  /   |
            // | MO(1) |  MO(2) | GUI |      | ALT  |  F2  |  SPACE |  | ENTER |  BSPC |  DEL  |       |  ←   |   ↓   |  →   |

            bindings = <
&kp TAB    &kp Q   &kp W     &kp E  &kp R     &kp T                          &kp Y      &kp U    &kp I      &kp O     &kp P      &kp ESC
&kp LCTRL  &kp A   &kp S     &kp D  &kp F     &kp G                          &kp H      &kp J    &kp K      &kp L     &kp MINUS  &kp AT
&kp LSHFT  &kp Z   &kp X     &kp C  &kp V     &kp B   &kp C_MUTE  &none      &kp N      &kp M    &kp COMMA  &kp DOT   &kp UP     &kp FSLH
&mo 1      &mo 2   &kp LGUI         &kp LALT  &kp F2  &kp SPACE   &kp ENTER  &kp BSPC   &kp DEL             &kp LEFT  &kp DOWN   &kp RIGHT
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Lower_layer {
            display-name = "Lower";

            // TODO: Some binds are waiting for shifted keycode support.
            // -----------------------------------------------------  ----------------------------------------------------------
            // | LANG2 |  LANG1 |  *  |  7   |  8   |  9   |                   |  '    |  (    |  )    |  [    |   ]     |  ^   |
            // | CTRL  |  ,     |  .  |  4   |  5   |  6   |                   |  $    |  %    |  &    |  :    |   ~     |  `   |
            // | SHIFT |  +     |  -  |  1   |  2   |  3   |  MUTE  |  |       |  !    |  "    |  #    |  ;    |   PG_UP |  _   |
            // | MO(1) |  MO(2) | GUI |      | ALT  |  0   |  SPACE |  | ENTER |  BSPC |  DEL  |       |  HOME |   PG_DN |  END |

            bindings = <
&kp LANG2  &kp LANG1    &kp ASTRK     &kp KP_N7  &kp KP_N8  &kp KP_N9                         &kp SQT    &kp LPAR   &kp RPAR   &kp LBKT   &kp RBKT   &kp CARET
&kp LCTRL  &kp COMMA    &kp DOT       &kp KP_N4  &kp KP_N5  &kp KP_N6                         &kp DLLR   &kp PRCNT  &kp AMPS   &kp COLON  &kp TILDE  &kp GRAVE
&kp LSHFT  &kp KP_PLUS  &kp KP_MINUS  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp C_MUTE  &none      &kp EXCL   &kp DQT    &kp HASH   &kp SEMI   &kp PG_UP  &kp UNDER
&mo 1      &mo 2        &kp LGUI                 &kp LALT   &kp KP_N0  &kp SPACE   &kp ENTER  &kp BSPC   &kp DEL               &kp HOME   &kp PG_DN  &kp END
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        Raise_layer {
            display-name = "Raise";

            // -----------------------------------------------------------------  -------------------------------------------------------------------
            // |       |        |  Clear BT    |  BT0 |      |      |                       |  F7   |  F8   |  F9   |  F10     |   F15   |  NUBS     |
            // | CTRL  |        |              |  BT1 |      |      |                       |  F4   |  F5   |  F6   |  F11     |   F16   |  INT_YEN  |
            // | SHIFT |        |  Clear Peer  |  BT2 |      |      |  MUTE    |  |         |  F1   |  F2   |  F3   |  F12     |   MS_UP |  BSLH     |
            // | MO(1) |  MO(2) | GUI          |      | ALT  |      |  Mouse 1 |  | Mouse 2 |       |       |       |  MS_LEFT |   MS_DN |  MS_RIGHT |

            bindings = <
&none      &none        &bt BT_CLR      &bt BT_SEL 0  &none     &none                        &kp F7  &kp F8  &kp F9  &kp F10         &kp F15         &kp NUBS
&kp LCTRL  &none        &none           &bt BT_SEL 1  &none     &none                        &kp F4  &kp F5  &kp F6  &kp F11         &kp F16         &kp INT_YEN
&kp LSHFT  &none        &bt BT_CLR_ALL  &bt BT_SEL 2  &none     &none  &kp C_MUTE  &none     &kp F1  &kp F2  &kp F3  &kp F12         &mmv MOVE_UP    &kp BSLH
&mo 1      &mo 2        &kp LGUI                      &kp LALT  &none  &mkp MB1    &mkp MB2  &none   &none           &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };

        naginata_layer {
            display-name = "Naginata";

            // Naginata input layer - 31 keys using &ng behavior
            // Same layout as default layer but with &ng bindings

            bindings = <
&kp TAB    &ng Q  &ng W     &ng E  &ng R     &ng T                          &ng Y     &ng U    &ng I      &ng O     &ng P     &kp ESC
&kp LCTRL  &ng A  &ng S     &ng D  &ng F     &ng G                          &ng H     &ng J    &ng K      &ng L     &ng SEMI  &kp AT
&kp LSHFT  &ng Z  &ng X     &ng C  &ng V     &ng B   &kp C_MUTE  &none      &ng N     &ng M    &ng COMMA  &ng DOT   &kp UP    &ng FSLH
&mo 1      &mo 2  &kp LGUI         &kp LALT  &mo 0   &ng SPACE   &ng ENTER  &kp BSPC  &kp DEL             &kp LEFT  &kp DOWN  &kp RIGHT
            >;
            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
